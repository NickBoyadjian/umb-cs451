1. Enter the number of hours it took you to complete the project between
   the <<< and >>> signs below (eg, <<<10>>>).

   <<< >>>
   
2. Enter the difficulty level (1: very easy; 5: very difficult) of the project
   between the <<< and >>> signs below (eg, <<<3>>>).

   <<< >>>

3. Provide a short description of how you approached each problem, issues you 
   encountered, and how you resolved those issues.

   Problem 1 (Long and Double Basic Types):
   Like all the other homeworks, I started with the Long type first. Looking at the Int class,
   The analyze function for Longs just needed to change the type from Type.Int to Type.Long.

   The codegen method was where the real change needed to happen. The codegen for Ints basically
   checked for all the int constants and used the JVM Byte code for them. I looked for the
   Long versions and found that there were only LCONST_0 and LCONST_1. This meant that I
   could just use a simple if statement to handle the three cases. If my value was 0L or 1L,
   I would use the appropriate constant. Otherwise, I would use the addLDCInstruction method
   and simply pass it the parsed long.

   I noticed an error when I tried to compile the sample file that seemed to be stemming from the
   parseLong method. After testing out the method with some hard coded values, I realized that I
   needed to remove the 'l' from the end of the text string. After doing this, the error went away
   and I hit another road block.

   Now I was getting an error in regards to the method call. My first instinct was to check the
   JMethodDeclaration file which I didn't find anything. I ended up using piazza for this and I
   learned that I was supposed to have the type descriptor for longs to be J, and I had for some
   reason had them set to L. This now fixed my problem and I was able to compile the Literals test
   file. From here I went to test the BasicTypes file and had a whole new set of errors.

   I commented out the file and went about adding small pieces to see what would work and what wouldn't.
   One of the first things I tested was created double variables which wasn't working. I checked the
   JVariable class and saw where it was handling the offset loading of ints. I took this as a template
   and added the check for longs and doubles and then just changed the appropriate JVM byte code
   instruction. I could now declare variables of type double and long.

   I ended up forgetting to add support for doubles and longs in the variableDeclaration class
   so I ended up coming back to this problem later on to add it. What I did to get this working was
   check, in analysis, if the definition type was a double or a long, and if it was, increment
   the offset one more time. I also needed to add support to the method declarations and what I did
   for that was go into the analyze method, and in the for loop that deals with the parameters,
   check if the param is a double or a long, and then just increment the offset one more time.

   After hitting a road block with the basic types file, I finally had to go into the jvm byte code
   to figure out why my program was compiling but wouldn't run. After looking around, I noticed that
   the return type for a method that should return a long, was actually attempting to return an
   object. For this I had to go into the JReturnStatement class and account for the new return types,
   long and double. Finally at this point my code was working.

   Problem 2 (Operators):
   I started this problem by going into the JAssignmentExpression file and working my way down all the
   classes. For the analyze methods, I really just needed to make sure It was now checking for long
   and doubles and then handling a few edge cases. For example the += operator could also work on
   Strings, but the others couldn't. From here it was mostly just doing the same thing for all the
   operators. In terms of the codegen methods, I would look for the appropriate JVM byte code
   instruction and then just replace that in each method.

   After getting all the assignments working, I went on to implement the JBinaryExpression file.
   This was similar to the assignments. I had to add extra checks since the operators didn't
   only work with ints, and then just use the different versions of the byte code.


   
   Problem 3 (Conditional Expression):
   Implementing condition expressions was very to if statements, the main difference was that
   I didn't need to check for null else branches. In the analyze method, I simply made sure that
   the conditional part was a boolean and that the two branches were of the same type.
   As for the code gen, I started with the if statement codegen as a basis and stripped away
   the checks for null, because with a conditional expression you can always assume that the
   else branch will be there.

   Problem 4 (Switch Statement): ...

   Problem 5 (Do-While Statement):
   Implementing the Do While statement ended up being easier than I expected. I started by looking
   over the While statement to get an idea of how it would work. The analyze was exactly the same.
   All the code needed to do was check if the condition was a boolean and then just analize the
   body of the expression. As for the codegen method, it was much more simple than the while loop.
   I had to create a label at the top of the body, so the code would be able to loop.
   Then I just needed to run codegen on the condition and if the condition evaluated to true,
   it would need to go back up to the label on the body.

   Problem 6 (For Statement): ...


   Problem 7 (Break Statement): ...

   Problem 8 (Continue Statement): ...

   Problem 9 (Exception Handlers): ...

   Problem 10 (Interface Type Declaration): ...

4. Did you receive help from anyone? List their names, status (classmate, 
   CS451/651 grad, TA, other), and the nature of help received.

   Name               Status       Help Received
   ----               ------       -------------

   ...                ...          ...

5. List any other comments here. Feel free to provide any feedback on how
   much you learned from doing the assignment, and whether you enjoyed
   doing it.

   ...
