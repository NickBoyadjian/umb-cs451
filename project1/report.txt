1. Enter the number of hours it took you to complete the project between
   the <<< and >>> signs below (eg, <<<10>>>).

   <<<5 - 7 hours>>>
   
2. Enter the difficulty level (1: very easy; 5: very difficult) of the project
   between the <<< and >>> signs below (eg, <<<3>>>).

   <<<2>>>

3. Provide a short description of how you approached each problem, issues you 
   encountered, and how you resolved those issues.

   Problem 1 (Using CLEmitter)
      Approach: ...
      I started by reading over the assignment and the hints document. One of the hints was that generating IsPrime
      is very similar to the GenFactorial file. So I started by reading over the GenFactorial file. This gave me a
      good idea about how the code was generally formatted. From there I mostly just copied the boilerplate stuff, like
      initializing the class and creating the main method. I made sure to write it all by hand and write notes along
      the way, that way I would remember what everything was doing better. I also used a website
      (https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings), which was a huge help in quickly figuring out
      what some of the instructions were. Having all the other example files was also a huge help because when I ran
      into other issues that weren't in the GenFactorial file, I could generally find it somewhere else.

      Issues and resolution: ...
      I was initially confused about how method arguments and return types were defined. By looking at all the other
      Gen files I was able to deduce how it worked, (Arguments in the parens and the return type at the end of the
      string).
      Overall I think this first problem was a good intro to better understand how the compiler works and having
      the chart open that I linked above was the biggest help. Most of the process was storing variables (I kept track
      of what was where with comments), pushing stuff onto the stack and executing commands, and then just creating the
      different branches as needed.

   Problem 2 (Arithmetic Operations)
      Approach: ...
      My overall approach for this problem was similar to the first. I started by reading the problem and the hints.
      The hints gave a good outline of the files I needed to look at, and from there I was able to look at how the other
      features were implemented and more or less make adjustments to them to fit what I was trying to do.

      Issues and resolution: ...
      I think my biggest issue was understanding what happens at each part of the compilation. So what needed to happen
      and where. For the division operator I had followed all the same steps as with the modulo but I couldn't figure
      out why it was erroring out. So I had to follow the steps and see what other parts of the code were doing. I then
      noticed that it wasn't working because the "/" character gets registered to check for comments in the scanner file.
      
   Problem 3 (Bitwise Operations)
      Approach: ...
      My initial approach for this part of the homework was similar to part 2. I read through the instructions and
      started by added the tokens to the TokenInfo file. I then moved on to the scanner and added the characters to
      the switch case. In this part it was simpler to add the characters. All but "&" were there own entries, but
      even "&" was pretty simple as I just needed to add an else case where the token wouldn't be an LAND. Then I
      worked on adding the expressions. This part was a bit tricky but by studying the other expressions I was able
      to figure out how to create the new ones. The last part was working on the parser which proved to be tricky.

      Issues and resolution: ...
      Working on the parser was the hardest part here because in problem two of the homework, we simply had to
      extend previously defined expressions. In this part we had to create new ones. The way I figured this out
      was by looking at the apendix of the homework assignment, and seeing how the already made expressions were
      written based on the writeup. After studying a few examples I started working on the new ones. I got most
      of them working but one of the issues I ran into was that I needed to change the way "conditionalAndExpression"
      was written. I noticed that it was different right away but I just assumed it was a typo. I spent a lot of time
      trying to figure out why my code wasn't working by going over all the steps of the compiler. I then noticed
      that the only unused expression was the inclusiveOrExpression, it needed to be used in the
      conditionAndExpression. This made sense since the compiler had no way of reaching the code I had written.
      After fixing this bug I was able to get all the examples comiled and working. 

   Problem 4 (Shift Operations)
      Approach: ...
      At this point of the homework assignment I felt very comfortable with all the steps of adding new
      language features to the compiler. I followed along the same steps as the previous two parts
      and was able to get the features working in about 10 minutes.

      Issues and resolution: ...
      I luckily didn't face any issues at this point of the homework because I had made the typical
      mistakes in previous parts and knew the caviats I needed to watch out for. Like I had mentioned
      in my response to the first problem, I had the sheet of java byte code instructions open so I
      could easily find the instruction I needed when implementing the codegen methods. Also when
      implementing the code in the parser, I knew I would have to make some changes to the methods
      that were already there. 

4. Did you receive help from anyone? List their names, status (classmate, 
   CS451/651 grad, TA, other), and the nature of help received.
   I was able to complete this homework simply by looking at the code
   and using the list of byte code instructions at
   (https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings)

   Name               Status       Help Received
   ----               ------       -------------

   ...                ...          ...

5. List any other comments here. Feel free to provide any feedback on how
   much you learned from doing the assignment, and whether you enjoyed
   doing it.

   I found this assignment quite enjoyable. I think the structure was well thought out.
   The first problem gave me a better understanding of how the compiler builds out the
   the final code (the classes and methods that are used for all this). The last three
   problems of the homework were all pretty similar but doing them over and over gave
   me more confidence in working with the various files. I realize now that some of
   my comments in the above response were obvious but I had done the homework before 
   any of the code was talked about in class so I was mostly figuring it out as I went
   along.
